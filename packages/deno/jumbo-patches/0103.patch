diff --git a/v8/src/heap/code-range.cc b/v8/src/heap/code-range.cc
index 2b78ff9063..f27881f3cc 100644
--- a/v8/src/heap/code-range.cc
+++ b/v8/src/heap/code-range.cc
@@ -146,14 +146,14 @@ bool CodeRange::InitReservation(v8::PageAllocator* page_allocator,
-  TRACE("=== Preferred region: [%p, %p)\n",
+  TRACE_IN_CODE_RANGE("=== Preferred region: [%p, %p)\n",
         reinterpret_cast<void*>(preferred_region.begin()),
         reinterpret_cast<void*>(preferred_region.end()));
 
@@ -175,17 +175,17 @@ bool CodeRange::InitReservation(v8::PageAllocator* page_allocator,
     Address step =
         RoundDown(preferred_region.size() / kAllocationTries, kPageSize);
     for (int i = 0; i < kAllocationTries; i++) {
-      TRACE("=== Attempt #%d, hint=%p\n", i,
+      TRACE_IN_CODE_RANGE("=== Attempt #%d, hint=%p\n", i,
             reinterpret_cast<void*>(params.requested_start_hint));
       if (candidate_cage.InitReservation(params)) {
-        TRACE("=== Attempt #%d (%p): [%p, %p)\n", i,
+        TRACE_IN_CODE_RANGE("=== Attempt #%d (%p): [%p, %p)\n", i,
               reinterpret_cast<void*>(params.requested_start_hint),
               reinterpret_cast<void*>(candidate_cage.region().begin()),
               reinterpret_cast<void*>(candidate_cage.region().end()));
-      }
+      }
     }
-    TRACE("=== Fallback attempt, hint=%p: [%p, %p)\n",
+    TRACE_IN_CODE_RANGE("=== Fallback attempt, hint=%p: [%p, %p)\n",
           reinterpret_cast<void*>(params.requested_start_hint),
           reinterpret_cast<void*>(region().begin()),
           reinterpret_cast<void*>(region().end()));
+
+  // Rename these two TRACE calls as well to fix error
+  TRACE_IN_CODE_RANGE("=== non-allocatable region: [%p, %p)\n",
+      reinterpret_cast<void*>(params.requested_start_hint),
+      reinterpret_cast<void*>(region().begin()));
+  TRACE_IN_CODE_RANGE("=== Exclude the first page from allocatable area\n");
 }
